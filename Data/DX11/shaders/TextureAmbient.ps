struct VS_OUT
{
	float4 position	: SV_POSITION;
	float2 uv		: TEXCOORD0;
	float3 normal   : TEXCOOORD1;
};

Texture2D diffuseMap;

SamplerState linearSample
{
};

cbuffer lighting
{
	float3 AmbientDown : packoffset(c0);
	float3 AmbientUp : packoffset(c1);
};

float3 CalculateAmbient( float3 normal, float4 color )
{
	// Convert from [-1, 1] to [0, 1]
	float up = normal.y * 0.5 + 0.5;
	
	// Calculate the ambient value.
	float3 ambient = AmbientDown + up * AmbientUp;
	
	// Apply the ambient value to the color
	return ambient * color;
};

float3 ps_main( in VS_OUT ps_in ) : SV_TARGET
{
	float4 color = diffuseMap.Sample( linearSample, ps_in.uv );
	float3 normal = normalize( ps_in.normal );
	color = float4(color.rgb * color.rgb, color.a );
	return CalculateAmbient( normal, color );
}
